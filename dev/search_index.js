var documenterSearchIndex = {"docs":
[{"location":"#LipschitzConstantEstimator","page":"Home","title":"LipschitzConstantEstimator","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LipschitzConstantEstimator.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides a function to estimate the lipschitz constant of a function numerically. ","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using LipschitzConstantEstimator\n# suppose we have the following function \nf(x) = x[1] - x[1]^3 / 3\n\n# define a domain we wish to evaluate over\ndomain = IntervalDomain( [-1.0], [1.0])\n# defined as IntervalDomain(lower_corner, upper_corner)\n\n# run the estimator\nresults = estimate_lipschitz_constant(f, domain);\n\n# destructure the results\nsuccess, L, optim_status, fitted_weibull = results;\n\n# check the success code (should be true)\nsuccess","category":"page"},{"location":"","page":"Home","title":"Home","text":"# get the estimated Lipschitz constant (should be close to 1)\nL","category":"page"},{"location":"","page":"Home","title":"Home","text":"# check the optimization status\noptim_status","category":"page"},{"location":"","page":"Home","title":"Home","text":"# get the fitted weibull distribution\nfitted_weibull","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are a few parameters to choose for the estimate_lipschitz_constant function, see the API below. ","category":"page"},{"location":"#Algorithm","page":"Home","title":"Algorithm","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The basic algorithm is described in","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{wood1996estimation,\n  title={Estimation of the Lipschitz constant of a function},\n  author={Zhang, BP},\n  journal={Journal of Global Optimization},\n  volume={8},\n  pages={91--103},\n  year={1996},\n  publisher={Springer}\n}","category":"page"},{"location":"","page":"Home","title":"Home","text":"The api we have provided allows for f R^d to R^p where d p geq 1 can be one or greater. Note, the original paper only analyzes the case where d = p = 1. ","category":"page"},{"location":"#Public-API","page":"Home","title":"Public API","text":"","category":"section"},{"location":"#LipschitzConstantEstimator.IntervalDomain","page":"Home","title":"LipschitzConstantEstimator.IntervalDomain","text":"IntervalDomain{DIM, F}\n\nA domain defined by a lower and upper bound for each dimension. The lower and upper bounds are represented as vectors of length DIM. The type parameter F represents the element type of the bounds.\n\n\n\n\n\n","category":"type"},{"location":"#LipschitzConstantEstimator.RevWeibull3P","page":"Home","title":"LipschitzConstantEstimator.RevWeibull3P","text":"RevWeibull3P\n\nA three-parameter reversed Weibull distribution, parameterized by scale λ, shape k, and location μ. This distribution is defined for x < μ, and it has a maximum at μ.\n\n\n\n\n\n","category":"type"},{"location":"#LipschitzConstantEstimator.estimate_lipschitz_constant","page":"Home","title":"LipschitzConstantEstimator.estimate_lipschitz_constant","text":"estimate_lipschitz_constant(f, domain::AbstractDomain, n=10, m=200, δ=0.05; alg = NelderMead(), kwargs...)\n\nEstimate the Lipschitz constant for a function f over a given domain. The function samples pairs of points from the domain, computes the Lipschitz constant for each pair and fits a reversed Weibull distribution to the estimates.\n\nf: the function for which the Lipschitz constant is to be estimated.\ndomain: an instance of AbstractDomain defining the bounds for sampling.\nn: number of samples to take for each estimate (default is 10). \nm: number of estimates to create (default is 200).\nδ: the distance within which to sample pairs of points (default is 0.05).\nalg: the optimization algorithm to use for fitting the reversed Weibull distribution (default is NelderMead()).\nkwargs: additional keyword arguments to pass to the optimization function.\n\nThe function returns a tuple containing\n\na boolean indicating whether the optimization converged\nthe estimated Lipschitz constant\nthe result struct from Optim.jl \nthe fitted reversed Weibull distribution parameters.\n\nThe Lipschitz constant is estimated as the location parameter μ of the fitted reversed Weibull distribution.\n\n\n\n\n\n","category":"function"},{"location":"#Private-API","page":"Home","title":"Private API","text":"","category":"section"},{"location":"#Distributions.cdf-Tuple{RevWeibull3P, Real}","page":"Home","title":"Distributions.cdf","text":"cdf(d::RevWeibull3P, x::Real)\n\nCompute the cumulative distribution function for the reversed Weibull distribution at x. If x >= μ, it returns 1.0, otherwise it computes the CDF using the formula:\n\noperatornamecdf(x) = begincases\n expleft(-left(fracμ - xλright)^kright)  textif  x  μ \n 1  textif  x geq μ\nendcases\n\nThis is slightly different from the form in Wood's paper, as the scale parameter is inside the exponent.\n\n\n\n\n\n","category":"method"},{"location":"#Distributions.logpdf-Tuple{RevWeibull3P, Real}","page":"Home","title":"Distributions.logpdf","text":"logpdf(d::RevWeibull3P, x::Real)\n\nCompute the logarithm of the probability density function for the reversed Weibull distribution at x. The distribution is defined for x < μ, and it returns -Inf for x >= μ.\n\n\n\n\n\n","category":"method"},{"location":"#Distributions.pdf-Tuple{RevWeibull3P, Real}","page":"Home","title":"Distributions.pdf","text":"pdf(d::RevWeibull3P, x::Real)\n\nCompute the probability density function for the reversed Weibull distribution at x. If x >= μ, it returns 1.0, otherwise it computes the PDF using the logpdf function.\n\n\n\n\n\n","category":"method"},{"location":"#LipschitzConstantEstimator.create_lipschitz_estimates","page":"Home","title":"LipschitzConstantEstimator.create_lipschitz_estimates","text":"create_lipschitz_estimates(f, domain::AbstractDomain, n=10, m=200, δ=0.05)\n\nCreate estimates of the Lipschitz constant for a function f over a given domain. The function samples pairs of points from the domain, computes the Lipschitz constant for each pair and returns a vector of estimates.\n\nf: the function for which the Lipschitz constant is to be estimated.\ndomain: an instance of AbstractDomain defining the bounds for sampling.\nn: number of samples to take for each estimate (default is 10).\nm: number of estimates to create (default is 200).\nδ: the distance within which to sample pairs of points (default is 0.05).\n\nThe function returns a vector of m estimates of the Lipschitz constant.\n\n\n\n\n\n","category":"function"},{"location":"#LipschitzConstantEstimator.fit_reversed_weibull","page":"Home","title":"LipschitzConstantEstimator.fit_reversed_weibull","text":"fit_reversed_weibull(data, initial_guess = [1.0, 1.0, 1.01 * maximum(data)]; alg=NelderMead(), kwargs...)\n\nFit a reversed Weibull distribution to the given data using maximum likelihood estimation. The function uses the negloglik function to compute the negative log-likelihood and optimizes it using the optimize function from the Optim package. The initial_guess parameter specifies the initial values for the parameters [λ, k, μ], where λ is the scale, k is the shape, and μ is the location (maximum). The default initial guess is [1.0, 1.0, 1.01 * maximum(data)], which ensures that μ is greater than the maximum value in the data. The optimization algorithm can be specified using the alg parameter, with NelderMead() as the default. Additional keyword arguments can be passed to the optimize function.\n\n\n\n\n\n","category":"function"},{"location":"#LipschitzConstantEstimator.in_domain-Union{Tuple{F}, Tuple{DIM}, Tuple{IntervalDomain{DIM, F}, StaticArraysCore.SVector{DIM, F}}} where {DIM, F}","page":"Home","title":"LipschitzConstantEstimator.in_domain","text":"in_domain(domain::IntervalDomain{DIM, F}, y::SVector{DIM, F}) where {DIM, F}\n\nCheck if a point y is within the bounds defined by the domain. Returns true if y is within the bounds, otherwise returns false.\n\n\n\n\n\n","category":"method"},{"location":"#LipschitzConstantEstimator.negloglik-Tuple{Any, Any}","page":"Home","title":"LipschitzConstantEstimator.negloglik","text":"negloglik(params, data)\n\nCompute the negative log-likelihood for the reversed Weibull distribution given parameters params and data data. The parameters are expected to be in the form [λ, k, μ], where λ is the scale, k is the shape, and μ is the location (maximum). The function returns Inf if the parameters are invalid (e.g., if λ <= 0, k <= 0, or μ <= maximum(data)).\n\n\n\n\n\n","category":"method"},{"location":"#LipschitzConstantEstimator.sample_pair-Union{Tuple{F}, Tuple{DIM}, Tuple{IntervalDomain{DIM, F}, Any}} where {DIM, F}","page":"Home","title":"LipschitzConstantEstimator.sample_pair","text":"sample_pair(domain::IntervalDomain{DIM, F}, δ) where {DIM, F}\n\nSample a pair of points (x, y) from the domain such that y is within a distance δ from x. The point x is sampled uniformly from the domain, and y is generated by adding a random direction vector scaled by δ to x.\n\n\n\n\n\n","category":"method"}]
}
